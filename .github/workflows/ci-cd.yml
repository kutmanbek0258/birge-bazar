name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

jobs:
  build-and-test:
    name: Build and Test All Microservices
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      kafka:
        image: bitnami/kafka:3.7
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          ALLOW_PLAINTEXT_LISTENER: "yes"
        ports: [9092:9092]
        options: >-
          --health-cmd="echo conf | nc localhost 9092"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      zookeeper:
        image: bitnami/zookeeper:3.8
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
        ports: [2181:2181]
        options: >-
          --health-cmd="echo ruok | nc localhost 2181"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
        env:
          discovery.type: single-node
          xpack.security.enabled: "false"
        ports: [9200:9200, 9300:9300]
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cat/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and Test with Maven (All Modules)
        run: mvn clean verify -DskipITs=false

      - name: Build Docker images (if needed)
        run: |
          for d in */ ; do
            if [[ -f "$d/Dockerfile" ]]; then
              docker build -t birge-bazar/${d%/}:latest $d
            fi
          done

  deploy:
    name: Deploy to Production (Manual)
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Пример: docker-compose deploy на сервер или push в registry
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          for d in */ ; do
            if [[ -f "$d/Dockerfile" ]]; then
              docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/birge-bazar-${d%/}:latest $d
              docker push ${{ secrets.DOCKERHUB_USERNAME }}/birge-bazar-${d%/}:latest
            fi
          done

      # Развертывание на сервере (пример через ssh и docker-compose)
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/your/compose
            docker compose pull
            docker compose up -d